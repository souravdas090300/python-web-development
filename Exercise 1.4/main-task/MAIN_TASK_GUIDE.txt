# Exercise 1.4 - Main Task Guide
# Step-by-Step Instructions with Screenshot Points

## Overview
This task consists of two Python scripts:
1. **recipe_input.py** - Input and store recipes in a binary file
2. **recipe_search.py** - Search recipes by ingredient

## Prerequisites
- Virtual environment (cf-python-base) activated
- IPython installed
- Working directory: Exercise 1.4/main-task

---

## PART 1: Testing recipe_input.py

### Setup
```powershell
cd "c:\Users\dasau\python-web-development\Exercise 1.4"
.\cf-python-base\Scripts\activate
cd main-task
ipython
```

### Step 1: Run recipe_input.py for the first time
In IPython, type:
```python
exec(open('recipe_input.py').read())
```

**When prompted:**
1. Enter filename: `recipes.bin`
2. How many recipes: `3`

### Recipe 1: Tea (Easy)
- Recipe name: `Tea`
- Cooking time: `5`
- Number of ingredients: `3`
- Ingredient 1: `Tea Leaves`
- Ingredient 2: `Sugar`
- Ingredient 3: `Water`

ðŸ“¸ **SCREENSHOT 1**: Take screenshot showing Recipe 1 input complete

### Recipe 2: Pasta (Medium)
- Recipe name: `Pasta`
- Cooking time: `8`
- Number of ingredients: `5`
- Ingredient 1: `Pasta`
- Ingredient 2: `Tomato Sauce`
- Ingredient 3: `Garlic`
- Ingredient 4: `Olive Oil`
- Ingredient 5: `Basil`

ðŸ“¸ **SCREENSHOT 2**: Take screenshot showing Recipe 2 input complete

### Recipe 3: Chicken Curry (Hard)
- Recipe name: `Chicken Curry`
- Cooking time: `40`
- Number of ingredients: `7`
- Ingredient 1: `Chicken`
- Ingredient 2: `Onion`
- Ingredient 3: `Tomato`
- Ingredient 4: `Curry Powder`
- Ingredient 5: `Garlic`
- Ingredient 6: `Ginger`
- Ingredient 7: `Coconut Milk`

ðŸ“¸ **SCREENSHOT 3**: Take screenshot showing Recipe 3 input complete and success message

---

## PART 2: Testing recipe_search.py

### Step 2: Run recipe_search.py
In the same IPython session, type:
```python
exec(open('recipe_search.py').read())
```

**When prompted:**
- Enter filename: `recipes.bin`

You'll see a list of all available ingredients with numbers.

ðŸ“¸ **SCREENSHOT 4**: Take screenshot showing the ingredient list

### Step 3: Search for "Garlic"
- Find the number for "Garlic" in the list (should be 2 or 3)
- Enter that number

ðŸ“¸ **SCREENSHOT 5**: Take screenshot showing recipes containing Garlic (Pasta and Chicken Curry)

### Step 4: Search again - run the script again
```python
exec(open('recipe_search.py').read())
```

- Enter filename: `recipes.bin`
- This time search for "Tea Leaves" or "Water"

ðŸ“¸ **SCREENSHOT 6**: Take screenshot showing the recipe containing Tea Leaves/Water (just Tea)

---

## PART 3: Adding More Recipes

### Step 5: Run recipe_input.py again to add more recipes
```python
exec(open('recipe_input.py').read())
```

**When prompted:**
- Enter filename: `recipes.bin` (same file - it will load existing recipes)
- How many recipes: `2`

### Recipe 4: Scrambled Eggs (Easy)
- Recipe name: `Scrambled Eggs`
- Cooking time: `7`
- Number of ingredients: `3`
- Ingredient 1: `Eggs`
- Ingredient 2: `Butter`
- Ingredient 3: `Salt`

### Recipe 5: Beef Stew (Hard)
- Recipe name: `Beef Stew`
- Cooking time: `90`
- Number of ingredients: `8`
- Ingredient 1: `Beef`
- Ingredient 2: `Potato`
- Ingredient 3: `Carrot`
- Ingredient 4: `Onion`
- Ingredient 5: `Garlic`
- Ingredient 6: `Beef Broth`
- Ingredient 7: `Tomato Paste`
- Ingredient 8: `Bay Leaf`

ðŸ“¸ **SCREENSHOT 7**: Take screenshot showing new recipes added successfully

---

## PART 4: Final Search Test

### Step 6: Search for a common ingredient
```python
exec(open('recipe_search.py').read())
```

- Enter filename: `recipes.bin`
- Search for "Garlic" (appears in Pasta, Chicken Curry, and Beef Stew)

ðŸ“¸ **SCREENSHOT 8**: Take screenshot showing all 3 recipes with Garlic

---

## PART 5: Error Handling Test

### Step 7: Test FileNotFoundError
```python
exec(open('recipe_search.py').read())
```

- Enter a wrong filename: `wrong_file.bin`

ðŸ“¸ **SCREENSHOT 9**: Take screenshot showing error message for file not found

### Step 8: Test Invalid Input
```python
exec(open('recipe_search.py').read())
```

- Enter filename: `recipes.bin`
- When prompted for ingredient number, enter: `abc` or `999`

ðŸ“¸ **SCREENSHOT 10**: Take screenshot showing error handling for invalid input

---

## Summary of Required Screenshots

1. Recipe 1 (Tea) input
2. Recipe 2 (Pasta) input
3. Recipe 3 (Chicken Curry) input and success message
4. Ingredient list displayed
5. Search result for Garlic (2 recipes)
6. Search result for Tea Leaves (1 recipe)
7. Adding 2 more recipes successfully
8. Search result for Garlic (3 recipes)
9. Error handling - file not found
10. Error handling - invalid input

---

## Verification Checklist

After completing all steps:

- [ ] recipes.bin file created in main-task directory
- [ ] At least 5 recipes stored in the file
- [ ] All 4 difficulty levels represented (Easy, Medium, Intermediate, Hard)
- [ ] Search function works correctly
- [ ] Error handling works for file not found
- [ ] Error handling works for invalid input
- [ ] All 10 screenshots taken and saved
- [ ] Screenshots have clear, descriptive filenames

---

## File Naming Convention for Screenshots

Save in: `c:\Users\dasau\python-web-development\Exercise 1.4\main-task\screenshot\`

Suggested names:
- `Part1_Step1_Recipe1_Tea.png`
- `Part1_Step2_Recipe2_Pasta.png`
- `Part1_Step3_Recipe3_Curry.png`
- `Part2_Step1_Ingredient_List.png`
- `Part2_Step2_Search_Garlic.png`
- `Part2_Step3_Search_TeaLeaves.png`
- `Part3_Step1_Add_More_Recipes.png`
- `Part4_Step1_Search_Garlic_All.png`
- `Part5_Step1_Error_FileNotFound.png`
- `Part5_Step2_Error_InvalidInput.png`

---

## Tips

1. Keep IPython running throughout - don't close it between steps
2. Make sure virtual environment is activated (cf-python-base in prompt)
3. Read error messages carefully - they help with debugging
4. Use the same filename (recipes.bin) throughout for consistency
5. Screenshots should show both the command and the output
6. Take your time entering recipe data to avoid typos
